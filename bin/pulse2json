#!/usr/bin/env node

var path = require('path')
  , child_process = require('child_process')
  , slide = require('slide')
  , glob = require('glob')
  , chain = slide.chain
  ;

var config =
    { recentBuilds: 10
    , branch: 'ci-build'
    }
  , properties =
    { id          : 'build.number'
    , revision    : 'build.revision'
    , status      : 'status'
    , testSummary : 'test.summary'
    }
  , stage_props =
    [ 'dir'
    , 'recipe'
    , 'status'
    , 'agent'
    , 'os'
    ]
  , stages =
    [ 'node_current-macosx-gyp'
    , 'node_v0_7-macosx-waf'
    , 'node_v0_6-macosx-waf'
    , 'node_v0_4-macosx-waf'
    , 'node_v0_7-linux-waf'
    , 'node_v0_6-linux-waf'
    , 'node_v0_4-linux-waf'
    , 'node_v0_4-freebsd-waf'
    ]
  ;

if (process.argv.length === 2) {
  var args = [];
  for (var p in properties) {
    args.push(p + '=${' + properties[p] + '}')
  }
  stages.forEach(function(s) {
    stage_props.forEach(function(p) {
      var name = ['stage', s, p].join('.');
      args.push(name + '=${' + name + '}');
    });
  });
  console.log(args.join(' '));
} else {
  var build = {stages: {}};
  process.argv.slice(2).forEach(function(arg) {
    var kv = arg.split('=') , key = kv.shift() , value = kv.shift();
    if (/^stage\./.test(key)) {
      var tokens = key.split('.');
      tokens.shift();
      var stage = tokens[0], prop = tokens[1];
      build.stages[stage] = build.stages[stage] || {};
      build.stages[stage][prop] = value;
    } else {
      build[key] = value;
    }
  });
  process_results(build, done);
}

function done() { console.log(arguments) }

function process_results(build, cb) {
  var rootd = path.resolve(__dirname, '..')
    , recentBuilds = {}
    ;
  chain( [ [cmd, 'git', ['pull', 'origin', config.branch], {cwd: rootd}]
         , [load_recents, rootd + '/builds/**/build.json', recentBuilds]
         ]
       , cb
       );
}

function load_recents(pattern, builds, cb) {
  glob(pattern, function(error, files) {
    console.log(error, files);
    cb(error, files);
  });
}

function cmd(executable, args, options, cb) {
  console.log(executable, args.join(' '), options);
  var c = child_process.spawn(executable, args, options);
  c.stdout.on('data', function(d) { console.log(d.toString())});
  c.stderr.on('data', function(d) { console.log(d.toString())});
  c.on('exit', function(code) {
    if (code) {
      cb(new Error(executable + ' exit code ' + code));
    } else {
      cb();
    }
  });
}

// vim: filetype=javascript :
