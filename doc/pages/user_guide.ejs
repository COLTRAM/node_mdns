<% meta('title', 'User Guide') %>

h1. mdns User Guide

mdns adds support for multicast DNS service discovery, also known as zeroconf or bonjour to "node.js":/joyent/node. It provides an object based interface to announce and browse services on the local network.

Internally, it uses the dns_sd API which is available on all major platforms. However, that does not mean it is equally well supported on all platforms. See "Compatibility Notes":#compatibility for more information.

h2. Quickstart

Before we begin go to the internet and get you a _bonjour browser_ so that you can all the service discovery.

Multicast DNS service discovery provides a way to announce and discover services on the local network. Here is how to announce a HTTP server running on port 4321:

bc. var mdns = require('mdns')
  , ad = mdns.createAdvertisement(mdns.tcp('http'), 4321)
  ;
ad.start();

A good place to do this is the @'listening'@ event handler of your HTTP server. Here is how to browse all HTTP servers on the local network:

bc. var browser = mdns.createBrowser(mdns.tcp('http'));
browser.on('serviceUp', function(service) {
  console.log("service up: ", service);
});
browser.on('serviceDown', function(service) {
  console.log("service down: ", service);
});
browser.start();

As you can see the browser object is an @EventEmitter@. For each HTTP server a @'serviceUp'@ event is emitted. Likewise, if a server disappears @'serviceDown'@ is send. The @service@ object of a @'serviceUp'@ event might look like this:

bc. { interfaceIndex: 4
, name: 'somehost'
, type: {name: 'http', protocol: 'tcp', subtypes: []}
, replyDomain: 'local.'
, fullname: 'somehost._http._tcp.local.'
, host: 'somehost.local.'
, port: 4321
, addresses: [ '10.1.1.50', 'fe80::21f:5bff:fecd:ce64' ]
}

h3(#service_types). On service types

Service type identifiers are strings used to match services to service queries. A service type always contains the service name and the protocol. Additionally it may contain one or more subtype identifiers. Here are some examples:

bc. _http._tcp
_osc._udp
_osc._udp,_api-v1,_api-v2

That's an awful lot of underscores and punctuation. To make things easier mdns has a helper class, called @ServiceType@ and some utility functions like @mdns.tcp(...)@ in the example above. Here are some ways to create a @ServiceType@ object:

bc. var r0 = mdns.tcp('http')                     // string form: _http._tcp
  , r1 = mdns.udp('osc', 'api-v1')            // string form: _osc._udp,_api-v1
  , r2 = new mdns.ServiceType('http', 'tcp')  // string form: _http._tcp
  , r3 = mdns.makeServiceType('https', 'tcp') // string form: _https._tcp
  ;

Wherever mdns calls for a @serviceType@ argument you can pass a @ServiceType@ object or any of the following representations:

bc. var r0 = '_http._tcp,_api-v1'                                   // string form
  , r1 = ['http', 'tcp', 'api-v1']                              // array form
  , r2 = {name: 'http', protocol: 'tcp', subtypes: ['api-v1']}  // object form
  ;

In fact all of these are legal constructor arguments for @ServiceType@. JSON (de-)serialization works too. And finally there is @makeServiceType(...)@ which turns any representation into a @ServiceType@ object unless it already is one.

h3(#resolver_sequence). The resolver sequence

The @Browser@ object uses a resolver sequence to collect address and port information. A resolver sequence is basically just an array of functions. The functions are called in order and receive two arguments: a @service@ object to decorate and a @next()@ function. Each function gathers information on the service, often by invoking asynchronous operations. When done the data is stored on the @service@ object and the next function is invoked by calling @next()@. This is kind of like web server middleware as it happens between service discovery and emitting the events.

Resolver sequence tasks (RSTs) are created by calling factory functions:

bc. var sequence = [
    mdns.rst.DNSServiceResolve()
  , mdns.rst.DNSGetAddrInfo({families: [4] })
];

To use a custom sequence pass it to the browser like this:

bc. var browser = mdns.createBrowser(mdns.tcp('http'), {resolverSequence: sequence});

And of course you can write your own tasks:

bc. var MCHammer = function MCHammer() {
  return function MCHammer(service, next) {
    console.log('STOP!');
    setTimeout(function() {
        console.log('hammertime...');
        service.hammertime = new Date();
        next();
    }, 2000);
  }
}

h2. Reference

Many arguments and options in mdns are directly passed to the dns_sd API. This document only covers the more important features. For in depth information on the API and how zeroconf service discovery works refer to "Further Reading":#further_reading.

h3. mdns.Advertisement

An @Advertisement@ publishes information about a service on the local network.

bq(#fairydust). The hack0r takes a good look at the local network, _someones_ local network and sprinkles it with fairydust. He watches the particles being swirled up into vortices originating in the passing network traffic. Datadevils on a parking lot next to the information freeway. Visible entropy. The particles in the vortices are illuminated by open ports and the pale neon light of multicast DNS service advertisements. The hack0r smiles.

h4. new mdns.Advertisement(serviceType, port, [options], [callback])

Create a new service advertisement with the given @serviceType@ and @port@. The @callback@ has the arguments @(error, service)@ and it is run after successful registration and if an error occurs. If the advertisement is used without a callback an handler should be attached to the @'error'@ event. The @options@ object contains additional arguments to @DNSServiceRegister(...)@:

- name := up to 63 bytes of Unicode to be used as the instance name. Think iTunes shared library names. If not given the host name is used instead.
- interfaceIndex   := one-based index of the network interface the service should be announced on.
- txtRecord        := is interesting... but not yet implemented. You can pass a @Buffer@ object but unfortunately there is no way to create it.
- host             := see documentation of @DNSServiceRegister(...)@
- domain           := see documentation of @DNSServiceRegister(...)@
- flags            := see documentation of @DNSServiceRegister(...)@
- context          := see documentation of @DNSServiceRegister(...)@

h4. Event: 'error'

bc. function onError(exception) {}

Emitted on asynchronous errors.

h4. ad.start()

Start the advertisement.

h4. ad.stop()

Stop the advertisement.

h3. mdns.Browser

A @mdns.Browser@ performs the discovery part. It emits events as services appear and disappear on the network. For new services it also resolves host name, port and IP addresses. The "resolver sequence":#resolver_sequence is fully user configurable.

Services are reported for each interface they are reachable on. Partly because that is what dns_sd is doing, partly because anything else would mean making assumptions.  

h4. new mdns.Browser(serviceType, [options])

Create a new browser to discover services that match the given @serviceType@. @options@ may contain the following properties:

- resolverSequence := custom "resolver sequence":#resolver_sequence for this browser
- interfaceIndex   := one-based index of the network interface the services should be discovered on.
- domain           := see documentation of @DNSServiceBrowse(...)@
- context          := see documentation of @DNSServiceBrowse(...)@
- flags            := see documentation of @DNSServiceBrowse(...)@

h4. Event: 'serviceUp'

bc. function onServiceUp(service) {}

Emitted when a new matching service is discovered.

h4. Event: 'serviceDown'

bc. function onServiceDown(service) {}

Emitted when a matching service disappears.

h4. Event: 'serviceChanged'

bc. function onServiceChanged(service) {}

Emitted when a matching service either appears or disappears. It is a new service if @service.flags@ has @mdns.kDNSServiceFlagsAdd@ set.

h4. Event: 'error'

bc. function onError(exception) {}

Emitted on asynchronous errors.

h4. browser.start()

Start the browser.

h4. browser.stop()

Stop the browser.

h4. mdns.Browser.defaultResolverSequence

This is the resolver sequence used by all browser objects that do not override it. It contains two steps. On platforms that have @DNSGetAddrInfo(...)@ it has the following items:

bc. var default_sequence = [
    mdns.rst.DNSServiceResolve()
  , mdns.rst.DNSGetAddrInfo()
  , mdns.rst.makeAddressesUnique()
];

On platforms that don't, @mdns.rst.getaddrinfo(...)@ is used instead. You could modify the default sequence but you shouldn't.

h3. Resolve Sequence Tasks

h4. mdns.rst.DNSServiceResolve(options)

Resolve host name and port. Probably all but the empty sequence start with this task. The @options@ object may have the following properties:

- flags := flags passed to @DNSServiceResolve(...)@

h4. mdns.rst.DNSGetAddrInfo(options)

Resolve IP addresses using @DNSGetAddrInfo(...)@

h4. mdns.rst.getaddrinfo(options)

Resolve IP addresses using nodes @cares.getaddrinfo(...)@... but it's a mess.

h4. mdns.rst.makeAddressesUnique()

Filters the addresses to be unique.

h4. mdns.rst.filterAddresses(f)

Filters the addresses by invoking @f()@ on each address. If @f()@ returns false the address is dropped.

h4. mdns.rst.logService()

Print the @service@ object.

h3. mdns.ServiceType

@ServiceType@ objects represent service type identifiers which have been discussed "above":#service_types. They store the required information in a normalized way and help with formating and parsing of these strings.

h4. new mdns.ServiceType(...)

Construct a @ServiceType@ object. When called with one argument the argument may be

* a service type identifier
* an array, the first element being the type, the second the protocol. Additional items are @subtypes@.
* an object with properties @name@, @protocol@ and optionally @subtypes@

All tokens may have a leading underscore. The n-ary form treats its arguments as an array. Copy construction works, too.

h4. service_type.name

The primary service type.

h4. service_type.protocol

The protocol used by the service. Must be 'tcp' or 'udp'.

h4. service_type.subtypes

Array of subtypes.

h4. service_type.toString()

Convert the object to a service type identifier.

h4. service_type.fromString(string)

Parse a service type identifier and store the values.

h4. service_type.toArray()

Returns the service type in array form.

h4. service_type.fromArray(array)

Set values from an array.

h4. service_type.fromJSON(obj)

Set values from object, including other @ServiceType@ objects.

h3. Functions

h4. mdns.tcp(...)

Expressive way to create a @ServiceType@ with protocol tcp.

h4. mdns.udp(...)

Expressive way to create a @ServiceType@ with protocol udp.

h4. mdns.makeServiceType(...)

Constructs a @ServiceType@ from its arguments. If the first and only argument is a @ServiceType@ it is just returned.

h4. mdns.createBrowser(serviceType, [options])

This factory function constructs a @Browser@.

h4. mdns.createAdvertisement(serviceType, port, [options], [callback])

This factory function constructs an @Advertisement@.

h4. mdns.browseThemAll(options)

Creates a browser initialized with the wildcard service type. When started the browser emits events for each _service type_ instead of each service instance. The @service@ objects have no @name@ property. By default the browser has an empty resolver sequence. You still can set one using the @options@ object.

h3. Constants

All dns_sd constants (supported by the implementation) are exposed on the @mdns@ object. Refer to the "dns_sd API documentation":http://developer.apple.com/library/mac/#documentation/Networking/Reference/DNSServiceDiscovery_CRef/dns_sd_h/ for a list.

h3. mdns.dns_sd

@mdns.dns_sd@ contains the native functions and data structures.

h2. Design Notes

The implementation has two layers: A low-level API and a more user friendly object based API. The low-level API is implemented in C++ and just wraps functions, data structures and constants from @dns_sd.h@. Most of the code deals with argument conversion and error handling. A smaller portion deals with callbacks from C(++) to javascript.

The high-level API is written in javascript. It connects the low-level API to nodes non-blocking IO infrastructure, namely @process.IOWatcher@. This results in excellent separation of concerns and leads to a very robust design... because Ryan is doing all the work.

h2(#compatibility). Compatibility Notes

h2(#further_reading). Further Reading

* "dns_sd API documentation":http://developer.apple.com/library/mac/#documentation/Networking/Reference/DNSServiceDiscovery_CRef/dns_sd_h/
* "Bonjour Overview":http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/NetServices/Introduction.html
* "DNS Service Discovery Programming Guide":http://developer.apple.com/library/mac/#documentation/Networking/Conceptual/dns_discovery_api/Introduction.html

