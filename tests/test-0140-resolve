#!/usr/bin/env node

var mdns  = require('../lib/mdns')
  , assert = require('assert')
  , t = require('./mdns_test')
  , rst = mdns.rst
  ;


var type = t.suffixedServiceType('node-mdns', 'tcp')
  , browser = new mdns.createBrowser(type, {resolverSequence: []})
  , up = 0
  , down = 0
  , changed = 0
  ;

browser.on('serviceUp', function(service) {
  assert.ok( ! ('host' in service));
  assert.ok( ! ('port' in service));
  assert.ok( ! ('fullname' in service));
  assert.ok( ! ('addresses' in service));

  var result_count = 0;
  function done() {
    if (++result_count === 3) {
      t.done();
    }
  }
  var s1 = clone(service);
  mdns.resolve(s1, function(error, service) {
    //console.log('default resolve:', error, service);
    if (error) throw error;
    assert.ok('host' in service);
    assert.ok('port' in service);
    assert.ok('fullname' in service);
    assert.ok('addresses' in service);
    done();
  });

  var s2 = clone(service);
  var seq2 = [rst.DNSServiceResolve(), rst.getaddrinfo()];
  mdns.resolve(s2, seq2, function(error, service) {
    //console.log('getaddrinfo resolve:', error, service);
    if (error) throw error;
    assert.ok('host' in service);
    assert.ok('port' in service);
    assert.ok('fullname' in service);
    assert.ok('addresses' in service);
    done();
  });

  var s3 = clone(service);
  var seq3 = [rst.DNSServiceResolve()];
  mdns.resolve(s3, seq3, function(error, service) {
    //console.log('resolve (no addresses):', error, service);
    if (error) throw error;
    assert.ok('host' in service);
    assert.ok('port' in service);
    assert.ok('fullname' in service);
    assert.ok( ! ('addresses' in service));
    done();
  });

  browser.stop();
});

var ad = t.runTestAd(type, 1337, 1000, function() {});

browser.start();

function clone(o) {
  var clone = {}, p;
  for (p in o) {
    clone[p] = o[p];
  }
  return clone;
}

// vim: filetype=javascript :
